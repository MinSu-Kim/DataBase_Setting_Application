
CREATE PROCEDURE proc_saledetail_orderby (in isSalePrice boolean)
BEGIN
   set @score:=0, @rank:=0;
   
   select 
         greatest( @rank := if(@score = if(isSalePrice, saleprice, marginprice), @rank, @rank + 1),  
         least(0, @score := if(isSalePrice,saleprice,marginprice)) ) as rank,
         code, name, price, salecnt, supplyprice, addtax, saleprice, marginrate, marginprice
   from 
      (select no, s.code code, name, price , salecnt ,  
         @saleprice:=price*salecnt saleprice,
         @addtax := ceil(@saleprice/11) addtax,
         @supprice := @saleprice - @addtax supplyprice,
         marginrate ,
         @marPrice := round(@supprice * (marginrate/100)) marginprice
      from  sale s join product p on s.code = p.code ) t
   order by if(isSalePrice,saleprice,marginprice) desc;
END;


CREATE PROCEDURE proc_sale_stat()
BEGIN
	select  sum(@saleprice:=price*salecnt) sale_price, 
		sum(@addtax := ceil(@saleprice/11)) addtax_price, 
		sum(@supprice := @saleprice - @addtax) supply_price, 
		sum(@marPrice := round(@supprice * (marginrate/100))) margin_price 
	from  sale s join product p on s.code = p.code;
END;
 
 
CREATE PROCEDURE proc_salefull_insert(
    in _code char(4), 
    in _price integer,
    in _salecnt integer,
    in _marginRate integer )
BEGIN
	declare sale_price integer;
	declare addtax integer;
	declare supply_Price integer;
	declare margin_Price integer;
	
	set sale_price = _price * _salecnt;
	set addtax = ceil(sale_price/11);
	set supply_price = sale_price - addtax;
	set margin_Price = round(supply_price*(_marginRate/100));
	insert into salefull(code, price, salecnt, marginRate, sale_price, addtax, supply_price, margin_Price)
	values(_code, _price, _salecnt, _marginRate, sale_price, addtax, supply_price, margin_Price);
END;
 


-- trigger
create trigger tri_sale_insert_after_detail
after insert on sale
for each row
BEGIN
   set @saleprice = NEW.price * NEW.salecnt,
   @addtax = ceil(@saleprice/11),
   @supprice = @saleprice - @addtax,
   @marPrice = round(@supprice * (NEW.marginrate/100));
	
   INSERT INTO saledetail(no, sale_price, addTax, supply_price, margin_price)
   VALUES(NEW.no, @saleprice, @addtax, @supprice, @marPrice);
END;

create trigger tri_sale_update_after_detail
after update on sale
for each row
BEGIN
   set @saleprice = NEW.price * NEW.salecnt,
   @addtax = ceil(@saleprice/11),
   @supprice = @saleprice - @addtax,
   @marPrice = round(@supprice * (new.marginrate/100));
	
   UPDATE saledetail
   SET sale_price=@saleprice, addTax=@addtax, supply_price=@supprice, margin_price=@marPrice
   where no = new.no;
END;


create trigger tri_sale_delete_after_detail
after delete on sale
for each row
BEGIN
    delete from saledetail
    where no = old.no;
END;

 